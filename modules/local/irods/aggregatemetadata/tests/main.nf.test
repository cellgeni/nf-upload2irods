nextflow_process {
    name "Test Process: IRODS_AGGREGATEMETADATA"
    script "../main.nf"
    process "IRODS_AGGREGATEMETADATA"

    tag "modules"
    tag "irods"
    tag "irods/aggregatemetadata"

    setup {
        run("IRODS_GETMETADATA", alias: "CRAM") {
            script "../../getmetadata/main.nf"
            process {
                """
                input[0] = [ [id: "data_object_1"], "/seq/illumina/runs/41/41796/lane1/plex1/41796_1#1.cram" ]
                """
            }
        }

        run("IRODS_GETMETADATA", alias: "CELLRANGER_ARC_OUTPUT") {
            script "../../getmetadata/main.nf"
            process {
                """
                input[0] = [ [id: "data_object_1"], "/seq/illumina/cellranger-arc/cellranger-arc202_count_43c2d8dd1eaf98b635896165fd98ae3a" ]
                """
            }
        }

        run("IRODS_GETMETADATA", alias: "EMPTY") {
            script "../../getmetadata/main.nf"
            process {
                """
                input[0] = [ [id: "data_object_1"], "/archive/cellgeni/multiome" ]
                """
            }
        }
    }

    test("Cellranger ARC output metadata aggregation") {
        tag "cellranger_arc"

        when {
            process {
                """
                input[0] = CELLRANGER_ARC_OUTPUT.out.csv
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.versions },
                { assert process.out.csv },
                { assert process.out.json },
                { assert path(process.out.csv.get(0).get(1)).csv.rowCount == 1 },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test(".cram file metadata aggregation") {
        tag "cram"

        when {
            process {
                """
                input[0] = CRAM.out.csv
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.versions },
                { assert process.out.csv },
                { assert process.out.json },
                { assert path(process.out.csv.get(0).get(1)).csv.rowCount == 1 },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("Empty file output metadata aggregation") {
        tag "empty"

        when {
            process {
                """
                input[0] = EMPTY.out.csv
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert process.out.versions },
                { assert process.out.csv },
                { assert process.out.json },
                { assert path(process.out.csv.get(0).get(1)).size() == 0},
                { assert snapshot(process.out).match() }
            )
        }
    }
}